# -*- coding: utf-8 -*-
"""
Created on Sat Sep 20 12:41:46 2025

@author: Mihail Pedus
"""

import datetime
import requests
import logging
import time
import os

from collections import defaultdict

from telegram.ext import Application, MessageHandler, CommandHandler, ChatMemberHandler, ContextTypes, JobQueue, filters
from telegram import Update

from icalendar import Calendar

from openai import OpenAI

TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY=os.getenv("OPENAI_API_KEY")

CHAT_IDS_FILE = "chat_ids.txt"
CHAT_IDS = []
ICAL_URLS = [
             "https://www.officeholidays.com/ics/ireland",
             "https://www.officeholidays.com/ics/russia",
             ]

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)

def load_chat_ids():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CHAT_ID –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ CHAT_IDS."""
    global CHAT_IDS
    if os.path.exists(CHAT_IDS_FILE):
        with open(CHAT_IDS_FILE, "r", encoding="utf-8") as f:
            CHAT_IDS = [line.strip() for line in f if line.strip().isdigit()]
    else:
        CHAT_IDS = []

def save_chat_id(chat_id: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π CHAT_ID –≤ —Ñ–∞–π–ª."""
    with open(CHAT_IDS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{chat_id}\n")

def register_chat_id(update):
    chat_id = update.message.chat.id
    if chat_id not in CHAT_IDS:
        CHAT_IDS.append(chat_id)
        save_chat_id(chat_id)
        print(f"–ù–æ–≤—ã–π CHAT_ID –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {chat_id}")

def generate_poem(event: dict) -> str:
    if event is None:
        prompt = """
–¢—ã –ø–æ—ç—Ç. –°–æ—Å—Ç–∞–≤—å –≤–µ—Å—ë–ª–æ–µ —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ –¥–µ–Ω—å –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.
–ß–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π —Å–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–∞–± –±–µ–∑ –æ—Å–æ–±–æ–≥–æ –ø–æ–≤–æ–¥–∞.

–ü—Ä–∞–≤–∏–ª–∞:
- –¢—Ä–∏ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –ø—Ä–æ –≤–µ—Å–µ–ª—å–µ, –¥—Ä—É–∂–±—É –∏ —Ä–∞–¥–æ—Å—Ç—å –±–µ–∑ –ø–æ–≤–æ–¥–∞.
- –ß–µ—Ç–≤—ë—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –ø–∞–±, –≤ —Ä–∏—Ñ–º—É.
- –¢–æ–Ω –ª—ë–≥–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, —Å —é–º–æ—Ä–æ–º –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ò—Ä–ª–∞–Ω–¥—Å–∫–æ–º –ø–∞–±–µ, –≥–∏–Ω–µ—Å—Å–µ.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å—è, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
"""
    else:
        prompt = f"""
–¢—ã –ø–æ—ç—Ç. –°–æ—Å—Ç–∞–≤—å –≤–µ—Å—ë–ª–æ–µ —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ —Å–æ–±—ã—Ç–∏–µ.
–ß–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–≥–∏–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π —Å–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–∞–±.

–°–æ–±—ã—Ç–∏–µ:
–î–∞—Ç–∞: {event['date']}
–ù–∞–∑–≤–∞–Ω–∏–µ: {event['summary']}
–°—Ç—Ä–∞–Ω–∞/–º–µ—Å—Ç–æ: {event['location']}
–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ {event['url']}

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ - Bank Holiday, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–Ω—è—Ç—å –∫ –∫–∞–∫–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–∞–∑–¥–Ω–∏–∫—É —ç—Ç–æ –ø—Ä–∏—É—Ä–æ—á–µ–Ω–æ –∏ –ø–∏—à–∏ –∏–º–µ–Ω–æ –ø—Ä–æ —ç—Ç–æ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫
- –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –∏–ª–∏ –¥–Ω—ë–º.
- –ß–µ—Ç–≤—ë—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –ø–∞–±, –≤ —Ä–∏—Ñ–º—É.
- –¢–æ–Ω –ª—ë–≥–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π, —Å —é–º–æ—Ä–æ–º —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ò—Ä–ª–∞–Ω–¥—Å–∫–æ–º –ø–∞–±–µ, –≥–∏–Ω–µ—Å—Å–µ.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.


–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å—è, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
"""

    response = client.chat.completions.create(
        model="gpt-4o-mini",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4o-mini –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–µ—à–µ–≤–ª–µ
        messages=[{"role": "user", "content": prompt}],
        max_tokens=100,
        temperature=0.6,
    )

    return response.choices[0].message.content.strip()

def safe_generate_poem(event):
    DEFAULT_POEM = """  
–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫ –∫ –Ω–∞–º –ø—Ä–∏—à—ë–ª,  
–•–æ—Ç–µ–ª–∏ —Å—Ç–∏—Ö ‚Äì –Ω–æ GPT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª–∫–æ–º.  
–•–æ—Ç—è –æ—à–∏–±–∫–∞ <{error_code}> –≤–æ–∑–Ω–∏–∫–ª–∞ –≤–¥—Ä—É–≥,  
–í–µ–¥—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤–µ—Å–µ–ª—å–µ –≤–∞–∂–Ω–µ–π –ª—é–±—ã—Ö —Ä–∞–∑–ª—É–∫.  
–¢–∞–∫ —á—Ç–æ, –¥—Ä—É–∑—å—è, –≤ –ø–∞–± –ø–æ–π–¥—ë–º –±–µ–∑ –ø—Ä–æ–º–µ–¥–ª–µ–Ω—å—è,  
–í–µ–¥—å –ø—Ä–∞–∑–¥–Ω–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞—Å –∫ –≤–µ—Å—ë–ª–æ–º—É –º–≥–Ω–æ–≤–µ–Ω—å—é!
"""
    try:
        return generate_poem(event)
    except Exception as e:
        error_code = getattr(e, "code", str(e))
        print(f"Generate poem exception: {e}")

    return DEFAULT_POEM.format(error_code=error_code)

def fetch_events():
    today = datetime.date.today()
    events = []

    for url in ICAL_URLS:
        try:
            r = requests.get(url)
            r.raise_for_status()
            gcal = Calendar.from_ical(r.text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
            continue

        for component in gcal.walk("VEVENT"):
            dt = component.get("DTSTART").dt
            if isinstance(dt, datetime.datetime):  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∞—Ç–µ
                dt = dt.date()
            
            summary = str(component.get("SUMMARY"))

            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º "–º–æ—Å—Ç–∏–∫–∏" –∏ "–∑–∞–º–µ–Ω—ã"
            if "bridge day" in summary.lower() or "in lieu" in summary.lower():
                continue
            
            if dt >= today:
                events.append({
                    "date": dt,
                    "summary": summary,
                    "location": str(component.get("LOCATION")),
                    "url": str(component.get("URL")),
                })
    
    # —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    grouped = defaultdict(list)
    for ev in events:
        grouped[ev["date"]].append(ev)

    collapsed = []
    for date, evs in grouped.items():
        if len(evs) == 1:
            collapsed.append(evs[0])
        else:
            collapsed.append({
                "date": date,
                "summary": "/".join(e["summary"] for e in evs),
                "location": "/".join(e["location"] for e in evs if e["location"]),
                "url": "/".join(e["url"] for e in evs if e["url"]),
            })
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ            
    return sorted(collapsed, key=lambda x: x["date"])

def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    events = fetch_events()
    today = datetime.date.today()
    for event in events:
        if event["date"] < (today + datetime.timedelta(days=3)):
            poem = safe_generate_poem(event)
            for chat_id in CHAT_IDS:
                context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n–°–∫–æ—Ä–æ {event['summary']}\n{poem}\nüç∫üç∫üç∫"
                )

async def start(update, context):
    register_chat_id(update)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–∞—Ä–Ω—ã–π –±–æ—Ç üç∫\n"
        "–Ø –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏ —Å–æ—á–∏–Ω–∏—Ç—å —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å–µ üéâ\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /next_event ‚Äî –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –∏–¥–µ–º –≤ –ø–∞–±!\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ —Å—Ö–æ–¥–∏—Ç—å –≤ –ø–∞–± –±–µ–∑ –ø–æ–≤–æ–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /go_to_pub\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π /list_events"
    )

async def next_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    register_chat_id(update)
    
    events = fetch_events()
    if not events:
        poem = safe_generate_poem(None)
        text = (
            f"–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"
            f"{poem}\nüç∫üç∫üç∫"
        )
    else :
        # –±–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
        event = events[0]
        poem = safe_generate_poem(event)
        text = (
            f"–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event['summary']} ({event['location']})\n"
            f"–î–∞—Ç–∞: {event['date']}\n\n"
            f"{poem}\nüç∫üç∫üç∫"
        )
    await update.message.reply_text(text)
    
async def go_to_pub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /go_to_pub: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏—Ö –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–∞–±.
    """
    register_chat_id(update)
    
    events = fetch_events()
    today = datetime.date.today()
    week_later = today + datetime.timedelta(days=7)

    if not events:
        # –°–æ–±—ã—Ç–∏–π –Ω–µ—Ç –≤–æ–æ–±—â–µ
        poem = safe_generate_poem(None)
        await update.message.reply_text(
            f"–ë–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–≤–æ–¥ –≥—Ä—É—Å—Ç–∏—Ç—å!\n\n{poem}\nüç∫"
        )
        return

    # –°–æ–±—ã—Ç–∏—è —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ, –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ
    next_event = events[0] if today <= events[0]["date"] <= week_later else None

    if next_event:
        poem = safe_generate_poem(next_event)
        await update.message.reply_text(
            f"–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ: {next_event['summary']} ({next_event['date']})!\n\n{poem}\nüç∫"
        )
    else:
        poem = safe_generate_poem(None)
        await update.message.reply_text(
            f"–ë–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç, –Ω–æ –Ω–µ —É–Ω—ã–≤–∞–µ–º!\n\n{poem}\nüç∫"
        )

async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    for user in update.message.new_chat_members:
        event = {
            "date": today,
            "summary": f"{user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É",
            "location": update.effective_chat.title or "–Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç",
            "url": ""
        }
        poem = safe_generate_poem(event)
        await update.effective_chat.send_message(
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n{poem}\nüç∫"
        )
        

async def bye_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today()
    user = update.message.left_chat_member
    event = {
            "date": today,
            "summary": f"{user.first_name} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç",
            "location": update.effective_chat.title or "–Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç",
            "url": ""
        }
    poem = safe_generate_poem(event)
    await update.effective_chat.send_message(
        f"{user.first_name} —É—à—ë–ª...\n\n{poem}\nüç∫"
    )

async def list_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    register_chat_id(update)

    events = fetch_events()
    if not events:
        await update.message.reply_text("–ë–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üç∫")
        return

    # –æ–≥—Ä–∞–Ω–∏—á–∏–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –±–ª–∏–∂–∞–π—à–∏–º–∏
    lines = []
    for ev in events[:10]:
        lines.append(f"üìÖ {ev['date']}: {ev['summary']} ({ev['location']})")

    text = "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n" + "\n".join(lines)
    await update.message.reply_text(text)

def main():
    load_chat_ids()

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next_event", next_event))
    app.add_handler(CommandHandler("go_to_pub", go_to_pub))
    app.add_handler(CommandHandler("list_events", list_events))

    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_member))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, bye_member))
    
    async def schedule_jobs(app):
        app.job_queue.run_daily(send_reminder, time=dt_time(hour=10, minute=0))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–º–µ—Å—Ç–µ —Å polling
    app.run_polling()

if __name__ == "__main__":
    main()
